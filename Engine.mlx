clear all;

data = readmatrix('data_structure_rigid_plane_frames_q1.xlsx');

n_element = data(1,1);
n_nodes = data(1,2);

E_ym = data(1,7);
E_ym_multiplier = data(1,12);
E = E_ym*10^E_ym_multiplier;

Area = data(:,8);

nodeConnections = [data(:,3), data(:,4)];
X_Coords = data(:,5);
Y_Coords = data(:,6);

NDU = data(1,10);
dzero = data(1:NDU,11); %first element should be NDU

F = data(:,9);

moments = data(:,12);
I = data(1,13);

%Initiate matrices
KE = zeros(6);
K = zeros(3*n_nodes);

% Pre-Processing
for i = 1:n_element
    n1 = nodeConnections(i,1);
    n2 = nodeConnections(i,2);
    x1 = X_Coords(n1);
    x2 = X_Coords(n2);
    y1 = Y_Coords(n1);
    y2 = Y_Coords(n2);
    plot ([x1,x2], [y1,y2], 'LineWidth', 4);
    hold on;
end
hold off;
for i = 1:n_element

    % Evaluate elental stiffness matrices

    n1 = nodeConnections(i,1); % 1st element 1st node
    n2 = nodeConnections(i,2); % 2nd element 2nd node
    x1 = X_Coords(n1);%etc
    x2 = X_Coords(n2);
    y1 = Y_Coords(n1);
    y2 = Y_Coords(n2);

    %Initiation and Pre-processing
    alpha = atan2((y2-y1),(x2-x1));


    c = cos(alpha);
    s = sin(alpha);
    L = sqrt((x2-x1)^2+(y2-y1)^2);

    const = E/L;

    KE =    [(Area(i)*c^2+((12*I*s^2)/L^2)), (Area(i)-(12*I/L^2))*c*s, -(6*I*s/L), -(Area(i)*c^2+((12*I*s^2)/L^2)), -(Area(i)-(12*I/L^2))*c*s, -(6*I*s/L);
            (Area(i)-(12*I/L^2))*c*s, (Area(i)*s^2+((12*I*c^2)/L^2)), (6*I*c/L), -(Area(i)-(12*I/L^2))*c*s, -(Area(i)*s^2+((12*I*c^2)/L^2)), (6*I*c/L);
            -(6*I*s/L), (6*I*c/L), 4*I, 6*I*s/L, -(6*I*c/L), 2*I;  

            -(Area(i)*c^2+((12*I*s^2)/L^2)), -(Area(i)-(12*I/L^2))*c*s, (6*I*s/L), (Area(i)*c^2+((12*I*s^2)/L^2)), (Area(i)-(12*I/L^2))*c*s, (6*I*s/L);
            -(Area(i)-(12*I/L^2))*c*s, -(Area(i)*s^2+((12*I*c^2)/L^2)), -(6*I*c/L), (Area(i)-(12*I/L^2))*c*s, (Area(i)*s^2+((12*I*c^2)/L^2)), -(6*I*c/L);
            -(6*I*s/L), (6*I*c/L), 2*I, 6*I*s/L, -(6*I*c/L), 4*I];
    
    KE = const*KE;

    % Assembly
    % Assemble into overall stiffness matrix

    j = n1;
    k = n2;

    III(1) = (3*j) - 2;
    III(2) = (3*j) - 1;
    III(3) = (3*j);
    III(4) = (3*k) - 2;
    III(5) = (3*k) - 1;
    III(6) = (3*k);


    for VI = 1:6
        MI = III(VI);
        for JX = 1:6
            MJ = III(JX);
            K(MI,MJ) = K(MI,MJ) + KE(VI,JX);
        end
    end
end

%solve
KT = K;

for k = 1:NDU
    n = dzero(k);
    KT(n,:) = 0;
    KT(:,n) = 0;
    KT(n,n) = 1;
end

% Calculate Unknown displacements and reaction forces
KTinv = inv(KT);
d = KTinv*F;
%d = KT\F
F = K*d;

for i = 1:n_element
    n1 = nodeConnections(i,1);
    n2 = nodeConnections(i,2);
    x1 = X_Coords(n1);
    x2 = X_Coords(n2);
    y1 = Y_Coords(n1);
    y2 = Y_Coords(n2);

    u1 = d(2*n1 - 1);
    v1 = d(2*n1);
    u2 = d(2*n2 - 1);
    v2 = d(2*n2);

    alpha = atan2((y2-y1),(x2-x1));

    c = cos(alpha);
    s = sin(alpha);

    L = sqrt((x2-x1)^2+(y2-y1)^2);

    FR(i) = (Area(i)*E_ym/L)*(((u2-u1)*c)+((v2-v1)*s));
    Sigma(i) = FR(i)/Area(i);
end

FR = FR.';
Sigma = Sigma.';%transpose sigma

% Display Structural Deformation

% Graphical presentation of Structural Deformation
% Evaluate new nodal coordinates

for i = 1:n_nodes
    u(i) = d(3*i-2);
    v(i) = d(3*i-1);
    m(i) = d(3*i);
end

for i = 1:n_nodes
     Xnew(i) = X_Coords(i) + 1000*u(i);
     Ynew(i) = Y_Coords(i) + 1000*v(i);
end

interps = 10; %number of interpolation points per element, arbitrary

for i = 1:n_element
    %assign all data required for plotting
    n1 = nodeConnections(i,1);
    n2 = nodeConnections(i,2);
    x1 = X_Coords(n1);
    x2 = X_Coords(n2);
    y1 = Y_Coords(n1);
    y2 = Y_Coords(n2);
    x1_new = Xnew(n1);
    x2_new = Xnew(n2);
    y1_new = Ynew(n1);
    y2_new = Ynew(n2);
    %rotations from bending moments
    theta1 = m(n1);
    theta2 = m(n2);

    L = sqrt((x2 - x1)^2 + (y2 - y1)^2);
    s = linspace(0, 1, interps);

    scaling_factor = 150; %will be a setting in gui
    
    %cubic splines
    Xline = (1 - 3*s.^2 + 2*s.^3) * x1_new + (3*s.^2 - 2*s.^3) * x2_new + (s.^3 - 2*s.^2 + s) * (scaling_factor * theta1 * L) + (s.^3 - s.^2) * (scaling_factor * theta2 * L);
    Yline = (1 - 3*s.^2 + 2*s.^3) * y1_new + (3*s.^2 - 2*s.^3) * y2_new + (s.^3 - 2*s.^2 + s) * (scaling_factor * theta1 * L) + (s.^3 - s.^2) * (scaling_factor * theta2 * L);
    plot(Xline, Yline, 'b', 'LineWidth', 2);
    hold on;

    plot([x1, x2], [y1, y2], 'k--'); % original structure, with dotted line for readability based on matlab codes for finite element analysis by AJM ferreira
    plot([x1_new, x2_new], [y1_new, y2_new], 'ro'); %deformed structure
end

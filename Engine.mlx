clear;
clc;
scaling_factor = 1; %will be a setting in gui

data = readmatrix('data_structure_rigid_plane_frames_q3.xlsx');

n_element = data(1,1);
n_nodes = data(1,2);

E_ym = data(1,7);
E_ym_multiplier = data(1,12);
E = E_ym*10^E_ym_multiplier;

Area = data(:,8);

nodeConnections = [data(:,3), data(:,4)];
X_Coords = data(:,5);
Y_Coords = data(:,6);

NDU = data(1,10);
dzero = data(1:NDU,11); %first element should be NDU

F = data(:,9);
q_xy = data(:, 14);

moments = data(:,12);
I = data(:,13);

%Initiate matrices
KE = zeros(6);
K = zeros(3*n_nodes);

% Pre-Processing
for i = 1:n_element
    n1 = nodeConnections(i,1);
    n2 = nodeConnections(i,2);
    x1 = X_Coords(n1);
    x2 = X_Coords(n2);
    y1 = Y_Coords(n1);
    y2 = Y_Coords(n2);
    plot ([x1,x2], [y1,y2], 'LineWidth', 4);
    hold on;
end
%make it look pretty
axis equal;
hold off;
for i = 1:n_element

    % Evaluate elental stiffness matrices

    n1 = nodeConnections(i,1); % 1st element 1st node
    n2 = nodeConnections(i,2); % 2nd element 2nd node
    x1 = X_Coords(n1);%etc
    x2 = X_Coords(n2);
    y1 = Y_Coords(n1);
    y2 = Y_Coords(n2);

    %Initiation and Pre-processing
    alpha = atan2((y2-y1),(x2-x1));


    c = cos(alpha);
    s = sin(alpha);
    L = sqrt((x2-x1)^2+(y2-y1)^2);

    const = E/L;

    KE =    [(Area(i)*c^2+((12*I(i)*s^2)/L^2)), (Area(i)-(12*I(i)/L^2))*c*s, -(6*I(i)*s/L), -(Area(i)*c^2+((12*I(i)*s^2)/L^2)), -(Area(i)-(12*I(i)/L^2))*c*s, -(6*I(i)*s/L);
            (Area(i)-(12*I(i)/L^2))*c*s, (Area(i)*s^2+((12*I(i)*c^2)/L^2)), (6*I(i)*c/L), -(Area(i)-(12*I(i)/L^2))*c*s, -(Area(i)*s^2+((12*I(i)*c^2)/L^2)), (6*I(i)*c/L);
            -(6*I(i)*s/L), (6*I(i)*c/L), 4*I(i), 6*I(i)*s/L, -(6*I(i)*c/L), 2*I(i);  

            -(Area(i)*c^2+((12*I(i)*s^2)/L^2)), -(Area(i)-(12*I(i)/L^2))*c*s, (6*I(i)*s/L), (Area(i)*c^2+((12*I(i)*s^2)/L^2)), (Area(i)-(12*I(i)/L^2))*c*s, (6*I(i)*s/L);
            -(Area(i)-(12*I(i)/L^2))*c*s, -(Area(i)*s^2+((12*I(i)*c^2)/L^2)), -(6*I(i)*c/L), (Area(i)-(12*I(i)/L^2))*c*s, (Area(i)*s^2+((12*I(i)*c^2)/L^2)), -(6*I(i)*c/L);
            -(6*I(i)*s/L), (6*I(i)*c/L), 2*I(i), 6*I(i)*s/L, -(6*I(i)*c/L), 4*I(i)];
    
    KE = const*KE;

    % Assembly
    % Assemble into overall stiffness matrix

    j = n1;
    k = n2;

    III(1) = (3*j) - 2;
    III(2) = (3*j) - 1;
    III(3) = (3*j);
    III(4) = (3*k) - 2;
    III(5) = (3*k) - 1;
    III(6) = (3*k);


    for VI = 1:6
        MI = III(VI);
        for JX = 1:6
            MJ = III(JX);
            K(MI,MJ) = K(MI,MJ) + KE(VI,JX);
        end
    end
end

%solve
KT = K;
 
%account for distributed loads
for i = 1:n_element
    
    qx = q_xy(2*i - 1); 
    qy = q_xy(2*i);     
    
    % skip if no distributed load
    if qx == 0 && qy == 0
        continue;
    end
   
    n1 = nodeConnections(i, 1);
    n2 = nodeConnections(i, 2);
    x1 = X_Coords(n1);
    y1 = Y_Coords(n1);
    x2 = X_Coords(n2);
    y2 = Y_Coords(n2);
    L = sqrt((x2 - x1)^2 + (y2 - y1)^2);
    alpha = atan2((y2 - y1), (x2 - x1));
    c = cos(alpha);
    s = sin(alpha);
     
    % Equivalent local nodal forces and moments for distributed loads
    F_local = [
    qx * L / 2;   
    qy * L / 2;   
    -qy * L^2 / 12 - qx * L^2 / 12; 
    qx * L / 2;    
    qy * L / 2;    
    qy * L^2 / 12 + qx * L^2 / 12  
    ];
    
    % Transformation to global coordinate system
    T = [
    s,  c,   0,  0,   0,   0;
    -c,  s,   0,  0,   0,   0;
    0,  0,   1,  0,   0,   0;
    0,  0,   0,  s,   c,   0;
    0,  0,   0, -c,   s,   0;
    0,  0,   0,  0,   0,   1  
    ];
    T(abs(T) < 1e-9) = 0 ; 

    % Transform local forces to global system
    F_global = T * F_local;

    % Assemble into global force vector
    indices = [3*n1-2, 3*n1-1, 3*n1, 3*n2-2, 3*n2-1, 3*n2];

    for j = 1:6
        F(indices(j)) = F(indices(j)) + F_global(j);
    end
end

for k = 1:NDU
    n = dzero(k);
    KT(n,:) = 0;
    KT(:,n) = 0;
    KT(n,n) = 1;
end
num_bends = sum(F(3:3:end) ~= 0);
num_dists = sum(abs(q_xy)>0);

no_bending = num_bends == 0 && num_dists == 0;
if no_bending 
    for i = 1:n_nodes
        theta_index = 3 * i;
        K(theta_index, :) = 0;
        K(:, theta_index) = 0;
        K(theta_index, theta_index) = 1;
        KT(theta_index, :) = 0;
        KT(:, theta_index) = 0;
        KT(theta_index, theta_index) = 1;
    end
end

% Calculate Unknown displacements and reaction forces
%d = inv(KT)*F;
d = KT\F;%matlab recommedns this instead of inv(A)*b
for i = 1:NDU
    d(dzero(i)) = 0;
end
F = K*d;

for i = 1:n_element
    n1 = nodeConnections(i,1);
    n2 = nodeConnections(i,2);
    x1 = X_Coords(n1);
    x2 = X_Coords(n2);
    y1 = Y_Coords(n1);
    y2 = Y_Coords(n2);

    u1 = d(2*n1 - 1);
    v1 = d(2*n1);
    u2 = d(2*n2 - 1);
    v2 = d(2*n2);

    alpha = atan2((y2-y1),(x2-x1));

    c = cos(alpha);
    s = sin(alpha);

    L = sqrt((x2-x1)^2+(y2-y1)^2);

    FR(i) = (Area(i)*E_ym/L)*(((u2-u1)*c)+((v2-v1)*s));
    Sigma(i) = FR(i)/Area(i);
end

FR = FR.';
Sigma = Sigma.';%transpose sigma

% Display Structural Deformation

% Graphical presentation of Structural Deformation
% Evaluate new nodal coordinates

for i = 1:n_nodes
    u(i) = d(3*i-2);
    v(i) = d(3*i-1);
    m(i) = d(3*i);
end

for i = 1:n_nodes
     Xnew(i) = X_Coords(i) + scaling_factor*u(i);
     Ynew(i) = Y_Coords(i) + scaling_factor*v(i);
end

interps = 10; %number of interpolation points per element, arbitrary
s = linspace(0, 1, interps);


for i = 1:n_element
    %assign all data required for plotting
    n1 = nodeConnections(i,1);
    n2 = nodeConnections(i,2);
    x1 = X_Coords(n1);
    x2 = X_Coords(n2);
    y1 = Y_Coords(n1);
    y2 = Y_Coords(n2);
    x1_new = Xnew(n1);
    x2_new = Xnew(n2);
    y1_new = Ynew(n1);
    y2_new = Ynew(n2);
    %rotations from bending moments
    theta1 = m(n1);
    theta2 = m(n2);

    L = sqrt((x2 - x1)^2 + (y2 - y1)^2);

    
    if theta1 == 0 && theta2 == 0
        plot([x1, x2], [y1, y2], 'k--'); % original structure, with dotted line for readability based on matlab codes for finite element analysis by AJM ferreira
        hold on;
        plot ([x1,x2], [y1,y2], 'ro');
        hold on;

        x1 = Xnew(n1);
        x2 = Xnew(n2);
        y1 = Ynew(n1);
        y2 = Ynew(n2);

        plot ([x1,x2], [y1,y2], 'LineWidth', 2);
        hold on;
        plot ([x1,x2], [y1,y2], 'ro');
        hold on;
    else
        %cubic splines
        Xline = (1 - 3*s.^2 + 2*s.^3) * x1_new + (3*s.^2 - 2*s.^3) * x2_new + (s.^3 - 2*s.^2 + s) * (scaling_factor * theta1 * L) + (s.^3 - s.^2) * (scaling_factor * theta2 * L);
        Yline = (1 - 3*s.^2 + 2*s.^3) * y1_new + (3*s.^2 - 2*s.^3) * y2_new + (s.^3 - 2*s.^2 + s) * (scaling_factor * theta1 * L) + (s.^3 - s.^2) * (scaling_factor * theta2 * L);
        plot(Xline, Yline, 'b', 'LineWidth', 2);

    
        hold on;
        
        plot([x1, x2], [y1, y2], 'k--'); % original structure, with dotted line for readability based on matlab codes for finite element analysis by AJM ferreira
        plot([x1_new, x2_new], [y1_new, y2_new], 'ro'); %deformed structure nodes
    end
    axis equal;
    ylim padded;
end
